#!/bin/bash

# Kubernetes Dashboard Setup Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Kubernetes Dashboard

set -e

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

DASHBOARD_VERSION="v2.7.0"
NAMESPACE="kubernetes-dashboard"

echo -e "${BLUE}üöÄ Kubernetes Dashboard Setup${NC}"
echo -e "${BLUE}==============================${NC}"
echo ""

# Function to check if kubectl is available
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        echo -e "${RED}‚ùå kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.${NC}"
        exit 1
    fi
}

# Function to check if cluster is accessible
check_cluster() {
    if ! kubectl cluster-info &> /dev/null; then
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä—É.${NC}"
        echo -e "${YELLOW}–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:${NC}"
        echo -e "  ‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω"
        echo -e "  ‚Ä¢ kubectl –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        echo -e "  ‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∞—Å—Ç–µ—Ä—É"
        exit 1
    fi
}

# Function to install dashboard
install_dashboard() {
    echo -e "${YELLOW}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Kubernetes Dashboard ${DASHBOARD_VERSION}...${NC}"
    
    if kubectl get namespace $NAMESPACE &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Namespace $NAMESPACE —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    fi
    
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/${DASHBOARD_VERSION}/aio/deploy/recommended.yaml
    
    echo -e "${GREEN}‚úÖ Dashboard —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
}

# Function to create admin user
create_admin_user() {
    echo -e "${YELLOW}üë§ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...${NC}"
    
    # Create ServiceAccount
    if ! kubectl get serviceaccount admin-user -n $NAMESPACE &> /dev/null; then
        kubectl create serviceaccount admin-user -n $NAMESPACE
        echo -e "${GREEN}‚úÖ ServiceAccount —Å–æ–∑–¥–∞–Ω${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ServiceAccount admin-user —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    fi
    
    # Create ClusterRoleBinding
    if ! kubectl get clusterrolebinding admin-user &> /dev/null; then
        kubectl create clusterrolebinding admin-user \
            --clusterrole=cluster-admin \
            --serviceaccount=$NAMESPACE:admin-user
        echo -e "${GREEN}‚úÖ ClusterRoleBinding —Å–æ–∑–¥–∞–Ω${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  ClusterRoleBinding admin-user —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    fi
}

# Function to create token
create_token() {
    echo -e "${YELLOW}üîë –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞...${NC}"
    
    TOKEN=$(kubectl -n $NAMESPACE create token admin-user)
    
    echo -e "${GREEN}‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:${NC}"
    echo -e "${BLUE}$TOKEN${NC}"
    echo ""
    echo -e "${YELLOW}üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Dashboard${NC}"
    
    # Save token to file
    echo "$TOKEN" > dashboard-token.txt
    echo -e "${GREEN}‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: dashboard-token.txt${NC}"
}

# Function to get dashboard status
get_status() {
    echo -e "${YELLOW}üìä –°—Ç–∞—Ç—É—Å Dashboard...${NC}"
    
    echo -e "${BLUE}Pods –≤ namespace $NAMESPACE:${NC}"
    kubectl get pods -n $NAMESPACE
    
    echo ""
    echo -e "${BLUE}Services –≤ namespace $NAMESPACE:${NC}"
    kubectl get services -n $NAMESPACE
}

# Function to start proxy
start_proxy() {
    echo -e "${YELLOW}üåê –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Dashboard...${NC}"
    echo ""
    echo -e "${GREEN}Dashboard –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:${NC}"
    echo -e "${BLUE}http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/${NC}"
    echo ""
    echo -e "${YELLOW}–î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ dashboard-token.txt${NC}"
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏${NC}"
    echo ""
    
    kubectl proxy
}

# Function to remove dashboard
remove_dashboard() {
    echo -e "${RED}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ Kubernetes Dashboard...${NC}"
    
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å Dashboard? (yes/no): " confirm
    if [ "$confirm" = "yes" ]; then
        kubectl delete -f https://raw.githubusercontent.com/kubernetes/dashboard/${DASHBOARD_VERSION}/aio/deploy/recommended.yaml
        kubectl delete clusterrolebinding admin-user 2>/dev/null || true
        rm -f dashboard-token.txt
        echo -e "${GREEN}‚úÖ Dashboard —É–¥–∞–ª–µ–Ω${NC}"
    else
        echo -e "${YELLOW}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
    fi
}

# Function to show help
show_help() {
    echo -e "${BLUE}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo -e "  $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo -e "${BLUE}–ö–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "  install    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Dashboard"
    echo -e "  token      –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω"
    echo -e "  access     –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Dashboard"
    echo -e "  status     –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Dashboard"
    echo -e "  remove     –£–¥–∞–ª–∏—Ç—å Dashboard"
    echo -e "  help       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo -e "${BLUE}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo -e "  $0 install   # –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Dashboard"
    echo -e "  $0 token     # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω"
    echo -e "  $0 access    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø"
}

# Main logic
case "${1:-install}" in
    "install")
        check_kubectl
        check_cluster
        install_dashboard
        echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Dashboard...${NC}"
        kubectl wait --for=condition=available --timeout=300s deployment/kubernetes-dashboard -n $NAMESPACE
        create_admin_user
        create_token
        get_status
        echo ""
        echo -e "${GREEN}üéâ Dashboard —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"
        echo -e "${YELLOW}–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: $0 access${NC}"
        ;;
    "token")
        check_kubectl
        check_cluster
        create_token
        ;;
    "access")
        check_kubectl
        check_cluster
        if [ -f "dashboard-token.txt" ]; then
            echo -e "${GREEN}–¢–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ dashboard-token.txt:${NC}"
            echo -e "${BLUE}$(cat dashboard-token.txt)${NC}"
            echo ""
        else
            echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω: $0 token${NC}"
            echo ""
        fi
        start_proxy
        ;;
    "status")
        check_kubectl
        check_cluster
        get_status
        ;;
    "remove")
        check_kubectl
        check_cluster
        remove_dashboard
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac 